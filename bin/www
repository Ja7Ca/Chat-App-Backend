#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("chat-backend:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const { Server } = require("socket.io");
const io = new Server(server, {
    cors: {
        origin: (_req, callback) => {
            callback(null, true);
        }, // Allow only your frontend's origin
        methods: ["GET", "POST"],
        credentials: true,
    },
});

// Socket.IO logic for groups (rooms)
io.on("connection", (socket) => {
    console.log("A user connected:", socket.id);

    // Join a specific group (room)
    socket.on("joinGroup", (groupName) => {
        socket.join(groupName);
        console.log(`User ${socket.id} joined group: ${groupName}`);
        socket.to(groupName).emit("message", {
            status: "alert",
            from: socket.id,
            success: true,
            message: `User ${socket.id} has joined the group.`,
        });
    });

    // Leave a specific group (room)
    socket.on("leaveGroup", (groupName) => {
        socket.leave(groupName);
        console.log(`User ${socket.id} left group: ${groupName}`);
        socket.to(groupName).emit("message", {
            status: "alert",
            from: socket.id,
            success: false,
            message: `User ${socket.id} has leave the group.`,
        });
    });

    // Send a message to a group
    socket.on("groupMessage", (groupName, message) => {
        console.log({
            from: socket.id,
            to: groupName,
            message: message,
        });
        io.to(groupName).emit("message", {
            from: socket.id,
            status: "message",
            message: message,
        });
    });

    // Handle disconnect
    socket.on("disconnect", () => {
        console.log("User disconnected:", socket.id);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log(`listen in port ${port}`);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
